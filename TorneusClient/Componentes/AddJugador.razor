@using Google.Protobuf.WellKnownTypes;
@using Grpc.Core;
@inject JugadorService jugadorService;
@inject IToastService toastService

<div class="containerAddJugador">


    <input type="number" @bind="Cedula" class="buttonStyle" placeholder="Ingrese una cedula">
    <button @onclick="BuscarJugador" class="buttonStyle">Buscar</button>


    <table class="blueTable">
    <tr style="align-content:center">
        <td>Cedula</td>
        <td>Nombres</td>
        <td>Apellidos</td>
        <td>Fecha de Nacimiento</td>
        <td></td>
    </tr>
    <tr>
       
        @if (existeJugador)
        {
            <td>@JugadorAsignado.Cedula</td>
            <td>@JugadorAsignado.Nombres</td>
            <td>@JugadorAsignado.Apellidos</td>
            <td>@fechaNacimiento.ToString("dd/MM/yyyy")</td>
            <td><button class="buttonStyle" @onclick="AsignarAEquipo">Agregar</button></td>
        }

        @if (!existeJugador)
        {
            <td><input type="text" @bind="JugadorAsignado.Cedula"></td>
            <td><input type="text" @bind="JugadorAsignado.Nombres"></td>
            <td><input type="text" @bind="JugadorAsignado.Apellidos"></td>
            <td><input type="date" @bind="fechaNacimiento"></td>
            <td><button class="buttonStyle" @onclick="CrearNuevo">Crear y agregar</button></td>
        }
       
    </tr>
</table>
</div>



@code {
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    public JugadorReply JugadorAsignado { get; set; } = new();
    private string Cedula = "";

    DateTime fechaNacimiento = DateTime.Today;

    bool existeJugador = false;

    async Task CrearNuevo()
    {
        //controlar si es mayor de edad
        JugadorAsignado.FechaNacimiento = Timestamp.FromDateTime(DateTime.SpecifyKind(fechaNacimiento, DateTimeKind.Utc));
        try
        {
            var nuevoJugador = await jugadorService.AddNuevoJugador(JugadorAsignado);

            JugadorAsignado.Id = nuevoJugador.Id;

            await AsignarAEquipo();
        }
        catch (RpcException ex)
        {
            throw new Exception(ex.Message);
        }

       
    }

    async Task BuscarJugador()
    {
        try
        {
            JugadorAsignado = await jugadorService.GetJugador(Cedula);
            existeJugador = true;
            fechaNacimiento = JugadorAsignado.FechaNacimiento.ToDateTime();

        }catch (Exception ex)
        {
            existeJugador = false;
            JugadorAsignado = new JugadorReply();

            toastService.ShowWarning(ex.Message);
        }
    }

    private async Task AsignarAEquipo() =>  await BlazoredModal.CloseAsync(ModalResult.Ok(JugadorAsignado));

    private async Task Cerrar() => await BlazoredModal.CancelAsync();
}
